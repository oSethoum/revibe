// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SELLER
  CLIENT
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role?    @default(CLIENT)
  image     String?
  client    Client?
  seller    Seller?

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  slug        String   @unique
  price       Float
  discount    Float    @default(0)
  stock       Int      @default(0)
  images      String[]
  attributes  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  sellerId String?
  seller   Seller? @relation(fields: [sellerId], references: [id])

  reviews    Review[]
  wishlists  Wishlist[]
  orders     Order[]
  orderItems OrderItem[]

  @@map("products")
}

model Seller {
  id         String    @id @default(cuid())
  shop       String    @unique
  isAccepted Boolean   @default(false)
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id])
  products   Product[]
  Comment    Comment[]

  @@map("sellers")
}

model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String     @unique
  user     User       @relation(fields: [userId], references: [id])
  posts    Post[]
  reviews  Review[]
  wishlist Wishlist[]
  orders   Order[]

  @@map("clients")
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  image     String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  parentCategoryId String? // optional foreign key
  parentCategory   Category?  @relation("ParentSubCategory", fields: [parentCategoryId], references: [id])
  subCategories    Category[] @relation("ParentSubCategory")

  @@map("categories")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount    Float
  productId String
  product   Product? @relation(fields: [productId], references: [id])
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])

  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  attribute Json?

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  clientId  String
  productId String
  rating    Int?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client  Client?  @relation(fields: [clientId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  clientId  String?
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client  Client?  @relation(fields: [clientId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@map("wishlists")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String?
  images      String[]
  clientId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client   Client    @relation(fields: [clientId], references: [id])
  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sellerId  String
  seller    Seller   @relation(fields: [sellerId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}
